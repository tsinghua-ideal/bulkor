// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_pthread.edl" import *;
    from "sgx_sys.edl" import *;
    from "sgx_thread.edl" import *;
    from "sgx_tprotected_fs.edl" import *;

    trusted {
        /* define ECALLs here. */
        public uint64_t ecall_create_oram(uint64_t n, [out] size_t * results_ptr);
        public void ecall_release_results_space(size_t results_ptr);
        public void ecall_destroy_oram();
        public sgx_status_t ecall_access(size_t batch_size,
                                        [in, size=queries_len] uint8_t * queries, 
                                        size_t queries_len,
                                        [out, size=answers_len] uint8_t * answers,
                                        size_t answers_len);
    };

    untrusted {
        void* sbrk_o(size_t size);

        void pull_all_elements(uint64_t id,
                            [out, count=databuf_len] uint8_t * databuf,
                            size_t databuf_len,
                            [out, count=metabuf_len] uint8_t * metabuf,
                            size_t metabuf_len);

        /// Ask untrusted to allocate oram storage
        ///
        /// This means, roughly, two arrays of byte arrays:
        /// data: [[u8; DataSize]; Count]
        /// meta: [[u8; MetaSize]; Count]
        ///
        /// The allocation produces an id which can be used to refer to and
        /// eventually free the allocation.
        ///
        /// If allocation fails, the id is set to 0, which is not a valid id.
        ///
        /// The enclave will check-out, and then later, check-in, elements of the storage.
        /// Multiple storage elements may be checked out in one operation, and then
        /// checked back in together.
        ///
        /// The untrusted implementation may assume that check-in will never occur without
        /// prior check-out, and that double check-out won't happen.
        ///
        /// When an element is checked out for the first time, the metadata MUST be zeroed.
        /// The data NEED NOT be initialized to any particular value, it would be correct
        /// for untrusted to malloc the data part and not initialize it.
        ///
        /// Arguments:
        /// - level: the current level of recursive ORAM
        /// - snapshot_id: used for recovery
        /// - count: The number of data items (and metadata items)
        /// - data_size: The size in bytes of a data item. Must be a multiple of 8
        /// - meta_size: The size in bytes of a metadata item. Must be a multiple of 8
        /// - id: Output parameter for the id of the new allocation.
        ///
        /// Thread safety: This call is thread-safe unconditionally
        void allocate_oram_storage(uint32_t level,
                                   uint64_t snapshot_id,
                                   uint8_t is_latest,
                                   uint64_t count,
                                   uint64_t data_size,
                                   uint64_t meta_size,
                                   [out] uint64_t * id);

        /// Prepare for global shuffle on ORAM indexed by allocation_id
        void allocate_shuffle_manager(uint64_t allocation_id, uint64_t z, size_t bin_size_in_block, [out] uint64_t * shuffle_id);

        /// Ask untrusted to persist oram storage
        void persist_oram_storage(uint32_t level,
                                uint64_t snapshot_id,
                                uint8_t is_volatile,
                                uint64_t id);

        /// Checkout several values from the untrusted storage allocation.
        ///
        /// Arguments:
        /// - id: The id of the storage to checkout from
        ///       Must be a valid id obtained from allocate_oram_storage
        /// - idx: The pointer to sequence of storage indices to checkout.
        ///        Each MUST be less than Count for this allocation.
        /// - idx_len: The number of storage indices to checkout.
        /// - databuf: Memory in which to place consecutive data items.
        /// - databuf_len: Number of u8 elements in the databuf buffer.
        ///                 MUST be equal to idx_len * DataSize for this allocation.
        /// - metabuf: Memory in which to place consecutive metadata items.
        /// - metabuf_len: Number of u8 elements in the metabuf buffer.
        ///                 MUST be equal to idx_len * MetaSize for this allocation.
        ///
        /// Thread safety:
        /// The untrusted implementation may also assume that multiple threads will not
        /// attempt to manipulate *the same storage id* concurrently, and may panic
        /// if this is violated.
        void checkout_oram_storage(uint64_t id,
                                   [in, count=idx_len] const uint64_t * idx,
                                   size_t idx_len,
                                   [out, count=databuf_len] uint8_t * databuf,
                                   size_t databuf_len,
                                   [out, count=metabuf_len] uint8_t * metabuf,
                                   size_t metabuf_len);

        /// Checkin several values to the untrusted storage allocation.
        ///
        /// Arguments:
        /// - id: The id of the storage to checkout from
        ///       Must be a valid id obtained from allocate_oram_storage
        /// - idx: The pointer to sequence of storage indices to checkout.
        ///        Each MUST be less than Count for this allocation.
        /// - idx_len: The number of storage indices to checkout.
        /// - databuf: Memory in which to place consecutive data items.
        /// - databuf_len: Number of u8 elements in the databuf buffer.
        ///                 MUST be equal to idx_len * DataSize for this allocation.
        /// - metabuf: Memory in which to place consecutive metadata items.
        /// - metabuf_len: Number of u8 elements in the metabuf buffer.
        ///                 MUST be equal to idx_len * MetaSize for this allocation.
        /// Thread safety:
        /// The untrusted implementation may also assume that multiple threads will not
        /// attempt to manipulate *the same storage id* concurrently, and may panic
        /// if this is violated.
        void checkin_oram_storage(uint64_t id,
                                  [in, count=idx_len] const uint64_t * idx,
                                  size_t idx_len,
                                  [in, count=databuf_len] const uint8_t * databuf,
                                  size_t databuf_len,
                                  [in, count=metabuf_len] const uint8_t * metabuf,
                                  size_t metabuf_len);

        /// Get snapshot id of lastest valid persisted states
        ///
        /// Arguments:
        /// - size_triv_pos_map: the expected size of complete trivial pos map, if no broken
        /// - snapshot_id: Output parameter for the id of the lastest valid snapshot.
        ///
        /// Thread safety: This call is thread-safe unconditionally
        void get_valid_snapshot_id(uint64_t size_triv_pos_map,
                                   [out] uint64_t * snapshot_id,
                                   [out] uint64_t * lifetime_id_from_meta);  

        /// Persist the stash, and save to files if necessary
        /// 
        /// Arguments:
        /// - new_stash_data: The pointer to stash data of a certain level
        /// - new_stash_data_len: Number of u8 elements in the new_stash_data buffer.
        /// - new_stash_meta: The pointer to stash meta of a certain level
        /// - new_stash_meta_len: Number of u8 elements in the new_stash_meta buffer.
        /// - level: the level of current persisting ORAM 
        /// - new_snapshot_id: The snapshot those states belong to
        /// - is_volatile:  Save to files if 0. 
        void persist_stash([in, count=new_stash_data_len] const uint8_t * new_stash_data,
                            size_t new_stash_data_len,
                            [in, count=new_stash_meta_len] const uint8_t * new_stash_meta,
                            size_t new_stash_meta_len, 
                            uint32_t level, 
                            uint64_t new_snapshot_id,
                            uint8_t is_volatile);
        
        /// Recover the stash
        /// 
        /// Arguments:
        /// - stash_data: The pointer to stash data of a certain level
        /// - stash_data_len: Number of u8 elements in the stash_data buffer.
        /// - stash_meta: The pointer to stash meta of a certain level
        /// - stash_meta_len: Number of u8 elements in the stash_meta buffer.
        /// - level: the level of current recovering ORAM 
        /// - snapshot_id: The snapshot those states belong to
        void recover_stash([out, count=stash_data_len] uint8_t * stash_data,
                            size_t stash_data_len,
                            [out, count=stash_meta_len] uint8_t * stash_meta,
                            size_t stash_meta_len,
                            uint32_t level, 
                            uint64_t snapshot_id);   

        /// Persist the treetop, and save to files if necessary
        /// 
        void persist_treetop([user_check] const uint8_t * new_data,
                            size_t new_data_len,
                            [user_check] const uint8_t * new_meta,
                            size_t new_meta_len, 
                            uint32_t level, 
                            uint64_t new_snapshot_id,
                            uint8_t is_volatile);
        
        /// Recover the treetop
        /// 
        void recover_treetop([user_check] uint8_t * data,
                            size_t data_len,
                            [user_check] uint8_t * meta,
                            size_t meta_len,
                            uint32_t level, 
                            uint64_t snapshot_id); 

        /// Persist the trusted merkle roots, and save to files if necessary
        /// 
        void persist_merkle_roots([in, count=new_roots_len] const uint8_t * new_roots,
                            size_t new_roots_len,
                            uint32_t level, 
                            uint64_t new_snapshot_id,
                            uint8_t is_volatile);
        
        /// Recover the trusted merkle roots
        /// 
        void recover_merkle_roots([out, count=roots_len] uint8_t * roots,
                            size_t roots_len,
                            uint32_t level, 
                            uint64_t snapshot_id); 


        /// Persist the trivial position map, and save to files if necessary
        /// 
        void persist_trivial_posmap([in, count=new_posmap_len] const uint8_t * new_posmap,
                            size_t new_posmap_len,
                            uint64_t new_snapshot_id,
                            uint8_t is_volatile);
        
        /// Recover the trivial position map
        /// 
        void recover_trivial_posmap([out, count=posmap_len] uint8_t * posmap,
                            size_t posmap_len,
                            uint64_t snapshot_id); 

        void shuffle_pull_buckets(uint64_t shuffle_id,
            size_t b_idx,
            size_t e_idx,
            [out, count=data_size] uint8_t * data,
            size_t data_size,
            [out, count=meta_size] uint8_t * meta,
            size_t meta_size);

        void shuffle_pull_bin(uint64_t shuffle_id,
            size_t tid,
            size_t cur_bin_num,
            uint8_t bin_type,
            [out] size_t * bin_size,
            size_t data_item_size,
            size_t meta_item_size,
            uint8_t has_data,
            uint8_t has_meta,
            size_t nonce_size,
            size_t hash_size,
            [out] size_t * data_ptr,
            [out] size_t * meta_ptr,
            [out] size_t * nonce_ptr,
            [out] size_t * hash_ptr);

        void shuffle_push_buckets_pre(uint64_t shuffle_id,
            size_t tid,
            size_t data_size,
            size_t meta_size,
            [out] size_t * data_ptr,
            [out] size_t * meta_ptr);

        void shuffle_push_buckets(uint64_t shuffle_id,
            size_t tid,
            size_t b_idx,
            size_t e_idx);
        
        void shuffle_push_bin_pre(uint64_t shuffle_id,
            size_t tid,
            size_t data_size,
            size_t meta_size,
            size_t nonce_size,
            size_t hash_size,
            [out] size_t * data_ptr,
            [out] size_t * meta_ptr,
            [out] size_t * nonce_ptr,
            [out] size_t * hash_ptr);

        void shuffle_push_bin(uint64_t shuffle_id,
            size_t tid,
            size_t cur_bin_num,
            uint8_t bin_type);

        void shuffle_push_tmp_posmap(size_t data_size,
            size_t nonce_size,
            size_t hash_size,
            [out] size_t * data_ptr,
            [out] size_t * nonce_ptr,
            [out] size_t * hash_ptr);

        void shuffle_pull_tmp_posmap([out] size_t * data_ptr,
            [out] size_t * nonce_ptr,
            [out] size_t * hash_ptr);

        void shuffle_release_tmp_posmap();

        void bin_switch(uint64_t shuffle_id);

        void set_fixed_bin_size(uint64_t shuffle_id, uint64_t data_bin_size, uint64_t meta_bin_size, uint64_t src_bin_size, uint64_t dst_bin_size);

        void clear_content(uint64_t shuffle_id);

        void build_oram_from_shuffle_manager(uint64_t shuffle_id, 
            uint64_t allocation_id);
    };

};
